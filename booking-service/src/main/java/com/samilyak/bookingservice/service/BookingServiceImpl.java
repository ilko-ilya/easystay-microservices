package com.samilyak.bookingservice.service;

import com.samilyak.bookingservice.client.AccommodationClient;
import com.samilyak.bookingservice.client.NotificationClient;
import com.samilyak.bookingservice.client.PaymentClient;
import com.samilyak.bookingservice.client.UserClient;
import com.samilyak.bookingservice.dto.booking.BookingRequestDto;
import com.samilyak.bookingservice.dto.booking.BookingResponseDto;
import com.samilyak.bookingservice.dto.client.accommodation.AccommodationDto;
import com.samilyak.bookingservice.dto.client.notification.NotificationRequestDto;
import com.samilyak.bookingservice.dto.client.payment.PaymentRequestDto;
import com.samilyak.bookingservice.dto.client.payment.PaymentResponseDto;
import com.samilyak.bookingservice.dto.notification.NotificationDto;
import com.samilyak.bookingservice.exception.AccessDeniedException;
import com.samilyak.bookingservice.exception.AccommodationNotAvailableException;
import com.samilyak.bookingservice.exception.EntityNotFoundException;
import com.samilyak.bookingservice.mapper.BookingMapper;
import com.samilyak.bookingservice.messaging.NotificationProducer;
import com.samilyak.bookingservice.model.Booking;
import com.samilyak.bookingservice.repository.BookingRepository;
import feign.FeignException;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import java.math.BigDecimal;
import java.time.temporal.ChronoUnit;
import java.util.List;
import java.util.Optional;

import static org.springframework.http.HttpHeaders.AUTHORIZATION;

@Slf4j
@Service
@RequiredArgsConstructor
public class BookingServiceImpl implements BookingService {

    private final BookingRepository bookingRepository;
    private final AccommodationClient accommodationClient;
    private final PaymentClient paymentClient;
    private final BookingMapper bookingMapper;
    private final UserClient userClient;
    private final NotificationClient notificationClient;
    private final NotificationProducer notificationProducer;

    @CacheEvict(value = {"userBookings"}, key = "#authentication.name")
    @Override
    public BookingResponseDto createBooking(BookingRequestDto requestDto, Authentication authentication) {
        String email = authentication.getName();
        String token = authentication.getCredentials() != null
                ? authentication.getCredentials().toString()
                : ((ServletRequestAttributes) RequestContextHolder.currentRequestAttributes())
                .getRequest()
                .getHeader(AUTHORIZATION);

        log.info("–ò—Ç–æ–≥–æ–≤—ã–π —Ç–æ–∫–µ–Ω: {}", token);
        log.info("–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º userId –¥–ª—è email: {}", email);
        Long userId = userClient.getUserIdByEmail(email);

        if (userId == null) {
            throw new IllegalStateException("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å userId –¥–ª—è email: " + email);
        }

        try {
            log.info("–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∂–∏–ª—å—ë –ø–æ id: {}", requestDto.accommodationId());
            AccommodationDto accommodation = accommodationClient.getAccommodationById(
                    requestDto.accommodationId(),
                    "Bearer " + token
            );

            if (!bookingRepository.findOverlappingBookings(
                    requestDto.accommodationId(),
                    requestDto.checkInDate(),
                    requestDto.checkOutDate()
            ).isEmpty()) {
                throw new AccommodationNotAvailableException("Accommodation is not available for these dates.");
            }

            long days = ChronoUnit.DAYS.between(requestDto.checkInDate(), requestDto.checkOutDate());
            BigDecimal totalPrice = accommodation.dailyRate().multiply(BigDecimal.valueOf(days));
            log.info("üí∞ –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ {} –¥–Ω–µ–π: {}", days, totalPrice);

            Booking booking = bookingMapper.toModel(requestDto, userId);
            booking.setStatus(Booking.Status.PENDING);
            booking.setTotalPrice(totalPrice);
            Booking savedBooking = bookingRepository.save(booking);

            // ‚úÖ –°–æ–∑–¥–∞—ë–º –ø–ª–∞—Ç—ë–∂
            PaymentRequestDto paymentRequest = new PaymentRequestDto(
                    savedBooking.getId(),
                    savedBooking.getTotalPrice(),
                    savedBooking.getPhoneNumber()
            );

            log.info("üìû –û—Ç–ø—Ä–∞–≤–ª—è–µ–º phoneNumber –≤ PaymentService: {}", requestDto.phoneNumber());

            PaymentResponseDto paymentResponse = paymentClient.createPayment(paymentRequest, "Bearer " + token);
            savedBooking.setPaymentId(paymentResponse.sessionId());
            savedBooking.setStatus(Booking.Status.CONFIRMED);
            bookingRepository.save(savedBooking);

            // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ RabbitMQ
            NotificationDto notification = new NotificationDto(
                    userId,
                    requestDto.phoneNumber(),
                    "–°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è –æ–ø–ª–∞—Ç—ã –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è #" + savedBooking.getId() + ". " +
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É."
            );

            notificationProducer.sendNotification(notification);
            log.info("üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å RabbitMQ –¥–ª—è bookingId={}", savedBooking.getId());

            return bookingMapper.toDto(savedBooking);
        } catch (RuntimeException ex) {
            // –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è: –ø–æ–º–µ—á–∞–µ–º –±—Ä–æ–Ω—å –∫–∞–∫ CANCELED (–µ—Å–ª–∏ —É—Å–ø–µ–ª–∏ —Å–æ–∑–¥–∞—Ç—å)
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {}", ex.getMessage(), ex);
            // –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ —Å–æ–∑–¥–∞–Ω–æ –≤ –ë–î –∏ –µ—Å—Ç—å ID
            bookingRepository.findTopByOrderByIdDesc().ifPresent(b -> {
                if (b.getStatus() == Booking.Status.PENDING) {
                    b.setStatus(Booking.Status.CANCELED);
                    bookingRepository.save(b);
                    log.info("‚Ü©Ô∏è –ë—Ä–æ–Ω—å {} –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ CANCELED –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏", b.getId());
                }
            });
            throw ex;
        }

//        // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Feign-–∫–ª–∏–µ–Ω—Ç
//        log.info("üì¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ...");
//        NotificationRequestDto notificationRequest = new NotificationRequestDto(
//                userId,
//                requestDto.phoneNumber(),
//                "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ."
//        );
//
//        notificationClient.sendNotification(notificationRequest);
//
//        return bookingMapper.toDto(savedBooking);
    }

    @Cacheable(value = "userBookings", key = "#authentication.name", unless = "#result.size() == 0")
    @Override
    public List<BookingResponseDto> getUserBookings(Authentication authentication) {
        Long userId = getUserIdFromAuthentication(authentication);
        return bookingRepository.findAllByUserId(userId)
                .stream()
                .map(bookingMapper::toDto)
                .toList();
    }

    @Cacheable(value = "booking", key = "#id + ':' + #authentication.name")
    @Override
    public BookingResponseDto getBookingById(Long id, Authentication authentication) {
        Booking booking = bookingRepository.findById(id)
                .orElseThrow(() -> new EntityNotFoundException("Booking not found with id: " + id));

        Long userId = getUserIdFromAuthentication(authentication);

        if (!booking.getUserId().equals(userId)) {
            throw new AccessDeniedException("You are not authorized to view this booking.");
        }

        return bookingMapper.toDto(booking);
    }

    @Transactional(readOnly = true)
    @Override
    public Long getUserIdByBookingId(Long bookingId) {
        log.info("üìå –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ userId –¥–ª—è bookingId = {}", bookingId);
        Booking booking = bookingRepository.findById(bookingId).orElseThrow(
                () -> new EntityNotFoundException("Can't find booking by bookingID: " + bookingId));
        Long userId = booking.getUserId();
        log.info("‚úÖ –ù–∞–π–¥–µ–Ω userId: {}", userId);
        return userId;
    }

    @CacheEvict(value = {"userBookings"}, key = "#authentication.name")
    @Override
    public void deleteBookingById(Long id) {
        Booking booking = bookingRepository.findById(id)
                .orElseThrow(() -> new EntityNotFoundException("Booking not found with id: " + id));

        bookingRepository.delete(booking);
    }

    @Override
    public Booking getLastBooking() {
        return bookingRepository.findTopByOrderByIdDesc()
                .orElseThrow(() -> new EntityNotFoundException("No bookings found"));
    }

    private Long getUserIdFromAuthentication(Authentication authentication) {
        String email = authentication.getName();
        log.info("üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º userId –¥–ª—è email: {}", email);

        try {
            return userClient.getUserIdByEmail(email);
        } catch (FeignException.NotFound e) {
            throw new EntityNotFoundException("User not found with email: " + email);
        } catch (FeignException e) {
            throw new RuntimeException("Error while fetching user ID from auth-service", e);
        }
    }
}

