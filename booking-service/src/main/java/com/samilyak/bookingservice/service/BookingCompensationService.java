package com.samilyak.bookingservice.service;

import com.samilyak.bookingservice.client.AccommodationClient;
import com.samilyak.bookingservice.client.PaymentClient;
import com.samilyak.bookingservice.dto.accommodation.AccommodationLockRequest;
import com.samilyak.bookingservice.dto.booking.BookingRequestDto;
import com.samilyak.bookingservice.model.Booking;
import com.samilyak.bookingservice.repository.BookingRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

@Slf4j
@Service
@RequiredArgsConstructor
public class BookingCompensationService {

    private final BookingRepository bookingRepository;
    private final AccommodationClient accommodationClient;
    private final PaymentClient paymentClient;

    public void compensate(Booking booking, BookingRequestDto dto) {
        // –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º —Å–≤–µ–∂—É—é –≤–µ—Ä—Å–∏—é –∏–∑ –ë–î
        Booking currentBooking = bookingRepository.findById(booking.getId()).orElse(null);

        if (currentBooking == null) {
            log.warn("‚ö†Ô∏è –ë—Ä–æ–Ω—å {} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏", booking.getId());
            return;
        }

        if (currentBooking.getStatus() == Booking.Status.CANCELED) {
            log.info("‚úÖ –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Ä–∞–Ω–µ–µ –¥–ª—è –±—Ä–æ–Ω–∏ {}", booking.getId());
            return;
        }

        try {
            log.info("üîÑ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –¥–ª—è –±—Ä–æ–Ω–∏ {}", booking.getId());

            // 1. –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–∞—Ç
            try {
                accommodationClient.unlockDates(
                        dto.accommodationId(),
                        new AccommodationLockRequest(
                                dto.accommodationId(),
                                dto.checkInDate(),
                                dto.checkOutDate(),
                                null
                        )
                );
                log.info("‚úÖ –î–∞—Ç—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è accommodation {}", dto.accommodationId());
            } catch (Exception unlockEx) {
                log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—ã: {}", unlockEx.getMessage());
            }

            // 2. –û—Ç–º–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞
            if (currentBooking.getPaymentId() != null) {
                try {
                    paymentClient.cancelPayment(currentBooking.getPaymentId());
                    log.info("‚úÖ –ü–ª–∞—Ç—ë–∂ {} –æ—Ç–º–µ–Ω—ë–Ω", currentBooking.getPaymentId());
                } catch (Exception cancelEx) {
                    log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç—ë–∂ {}: {}",
                            currentBooking.getPaymentId(), cancelEx.getMessage());
                }
            }

            // 3. –û—Ç–º–µ—á–∞–µ–º –±—Ä–æ–Ω—å –∫–∞–∫ CANCELED
            currentBooking.setStatus(Booking.Status.CANCELED);
            bookingRepository.save(currentBooking);
            log.info("‚úÖ –ë—Ä–æ–Ω—å {} –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ CANCELED", currentBooking.getId());

            log.info("‚ôªÔ∏è –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –¥–ª—è –±—Ä–æ–Ω–∏ {}", booking.getId());

        } catch (Exception e) {
            log.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –±—Ä–æ–Ω–∏ {}", booking.getId(), e);
        }
    }
}
