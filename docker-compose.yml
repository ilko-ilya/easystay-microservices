
services:

  # ==========================
  # PostgreSQL (База данных)
  # ==========================
  postgres:
    image: postgres:15
    container_name: postgres
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_USER: postgres
#      POSTGRES_USER: ${POSTGRES_USER}
#      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PASSWORD: Q12345w6
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 10s
      retries: 5
      start_period: 20s
    networks:
      - booking-network

  # ==========================
  # Redis (Кеширование)
  # ==========================
  redis:
    image: redis:7
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      retries: 5
      start_period: 10s
    networks:
      - booking-network

  # ==========================
  # RabbitMQ (Брокер сообщений)
  # ==========================
  rabbitmq:
    image: "rabbitmq:3-management"
    container_name: "rabbitmq"
    hostname: "rabbitmq"
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"  # Панель управления RabbitMQ
    environment:
      RABBITMQ_DEFAULT_USER: "guest"
      RABBITMQ_DEFAULT_PASS: "guest"
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      retries: 5
      start_period: 20s
    networks:
      - booking-network

  # ==========================
  # Zipkin (Трассировка запросов)
  # ==========================
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    restart: always
    ports:
      - "9411:9411"
    networks:
      - booking-network

  # ==========================
  # Eureka Server (Service Discovery)
  # ==========================
  eureka-server:
    build: ./discovery
    container_name: eureka-server
    restart: always
    ports:
      - "8761:8761"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - booking-network

  # ==========================
  # Config Server (Централизованная конфигурация)
  # ==========================
  config-server:
    build: ./config-server
    container_name: config-server
    restart: always
    ports:
      - "8888:8888"

    depends_on:
      eureka-server:
        condition: service_healthy

    environment:
      SPRING_PROFILES_ACTIVE: native
      SERVER_ADDRESS: 0.0.0.0  # Чтобы слушал на всех интерфейсах
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/

    healthcheck:
      test: [ "CMD", "curl", "-f", "http://config-server:8888/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5

    networks:
      - booking-network

  # ==========================
  # API Gateway
  # ==========================
  gateway:
    build: ./gateway
    container_name: gateway
    restart: always
    ports:
      - "8222:8222"
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_started
    environment:
      SPRING_PROFILES_ACTIVE: docker
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://eureka-server:8761/eureka/"
      EUREKA_INSTANCE_HOSTNAME: gateway
      EUREKA_INSTANCE_PREFER_IP_ADDRESS: "true"

    networks:
      - booking-network

  # ==========================
  # Authentication Service
  # ==========================
  auth-service:
    build: ./auth-service
    container_name: auth-service
    restart: always
    ports:
      - "8081:8081"
    depends_on:
      postgres:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/auth
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: Q12345w6
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
    #      EUREKA_URI: http://eureka-server:8761/eureka
    networks:
      - booking-network

  # ==========================
  # Booking Service
  # ==========================
  booking-service:
    build: ./booking-service
    container_name: booking-service
    restart: always
    ports:
      - "8084:8084"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_started
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/booking
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: Q12345w6
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://eureka-server:8761/eureka/"
      EUREKA_INSTANCE_HOSTNAME: booking-service
      EUREKA_INSTANCE_PREFER_IP_ADDRESS: "true"
    networks:
      - booking-network

  # ==========================
  # Accommodation Service
  # ==========================
  accommodation-service:
    build: ./accommodation-service
    container_name: accommodation-service
    restart: always
    ports:
      - "8082:8082"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_started
      address-service:
        condition: service_started
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/accommodation
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: Q12345w6
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://eureka-server:8761/eureka/"
      EUREKA_INSTANCE_HOSTNAME: accommodation-service
      EUREKA_INSTANCE_PREFER_IP_ADDRESS: "true"

    networks:
      - booking-network

  # ==========================
  # Notification Service (RabbitMQ)
  # ==========================
  notification-service:
    build: ./notification-service
    container_name: notification-service
    restart: always
    ports:
      - "8086:8086"
    depends_on:
      rabbitmq:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_started
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
    #      EUREKA_URI: http://eureka-server:8761/eureka
    networks:
      - booking-network

  # ==========================
  # Address Service
  # ==========================
  address-service:
    build: ./address-service
    container_name: address-service
    restart: always
    ports:
      - "8083:8083"
    depends_on:
      postgres:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_started
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/address
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: Q12345w6
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: "http://eureka-server:8761/eureka/"
      EUREKA_INSTANCE_HOSTNAME: address-service
      EUREKA_INSTANCE_PREFER_IP_ADDRESS: "true"

    #      EUREKA_URI: http://eureka-server:8761/eureka
    networks:
      - booking-network

  # ==========================
  # Payment Service
  # ==========================
  payment-service:
    build: ./payment-service
    container_name: payment-service
    restart: always
    ports:
      - "8085:8085"
    depends_on:
      postgres:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_started
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/payment
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: Q12345w6
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
    #      EUREKA_URI: http://eureka-server:8761/eureka
    networks:
      - booking-network

# ==========================
# ОБЪЯВЛЕНИЕ VOLUMES
# ==========================
volumes:
  pg_data:

# ==========================
# ОБЪЯВЛЕНИЕ NETWORKS
# ==========================
networks:
  booking-network:
    driver: bridge

