package com.samilyak.paymentservice.controller;

import com.samilyak.paymentservice.model.Payment;
import com.samilyak.paymentservice.service.PaymentService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.Map;

@Slf4j
@RestController
@RequestMapping("/api/payments/webhook")
@RequiredArgsConstructor
public class StripeWebhookStubController {

    private final PaymentService paymentService;

    @Value("${stripe.webhook-secret}")
    private String endpointSecret;

    @PostMapping
    public ResponseEntity<String> handleFakeStripeEvent(
            @RequestBody Map<String, Object> payload,
            @RequestHeader(value = "Stripe-Signature", required = false) String sigHeader) {

        log.info("üì© Webhook –ø–æ–ª—É—á–µ–Ω! payload={}, signature={}", payload, sigHeader);

        // –ó–∞–≥–ª—É—à–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ "–ø–æ–¥–ø–∏—Å–∏"
        if (sigHeader == null || !sigHeader.equals(endpointSecret)) {
            log.warn("‚ùå –ü–æ–¥–ø–∏—Å—å –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç! sigHeader={} secret={}", sigHeader, endpointSecret);
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Invalid signature");
        }

        // "–≠–º—É–ª–∏—Ä—É–µ–º" —Å–æ–±—ã—Ç–∏—è Stripe
        String eventType = (String) payload.get("type");
        String sessionId = (String) payload.get("sessionId");

        switch (eventType) {
            case "checkout.session.completed" -> {
                log.info("‚úÖ –û–ø–ª–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ, sessionId={}", sessionId);
                Payment payment = paymentService.findBySessionId((sessionId));
                paymentService.updatePaymentStatus(payment.getId(), Payment.Status.PAID);
            }
            case "checkout.session.expired" -> {
                log.info("‚ö†Ô∏è –°–µ—Å—Å–∏—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–∞, sessionId={}", sessionId);
                Payment payment = paymentService.findBySessionId(sessionId);
                paymentService.updatePaymentStatus(payment.getId(), Payment.Status.CANCELED);
            }
            default -> log.info("üìå –ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: {}", eventType);
        }

        return ResponseEntity.ok("success");
    }
}

